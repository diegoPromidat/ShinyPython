---
title: "Shiny Python"
author: "PROMiDAT"
format: 
  dashboard:
    scrolling: false
    css: "estilos/estilo.css"
filters:
  - shinylive
embed-resources: false
---

# Introducción

## Row {height=60%}

![](imagenes/logo_completo.png){width=95%}

## Row {height=40%}

::: card
En este documento se explica como crear una aplicación con `Shiny` en `python`. Para ello es importante instalar el paquete como se muestra a continuación:

`pip install shiny`

La documentación completa del paquete puede verla en el siguiente enlace: [https://shiny.posit.co/py/](https://shiny.posit.co/py/)
:::

# ui 

## Row {.tabset}

::: {.card title="Diseños"}

### **page_fluid**

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]

from shiny import App, render, ui, reactive
# page_fluid crea una página básica.
app_ui = ui.page_fluid(
  # Contenido
  "Contenido",
  
  # Titulo
  title = "Aplicación"
)

def server(input, output, session):
  pass

app = App(app_ui, server)
```

### **page_navbar**

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]

from shiny import App, render, ui, reactive
# page_navbar crea una página con encabezado.
# El encabezado puede contener tabs de navegación.
app_ui = ui.page_navbar(
  # Cada nav es un tab de navegación.
  ui.nav_panel(
    # Titulo
    "TAB 1",
    
    # Contenido
    "Contenido 1"
  ),
  
  ui.nav_panel(
    # Titulo
    "TAB 2",
    
    # Contenido
    "Contenido 2"
  ),
  
  # Titulo
  title = "Aplicación",
  
  # Color del encabezado
  bg = "steelblue"
  
)

def server(input, output, session):
  pass

app = App(app_ui, server)
```

### **layout_sidebar**

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]

from shiny import App, render, ui, reactive

app_ui = ui.page_fluid(
  # layout_sidebar define un diseño con una barra lateral.
  ui.layout_sidebar(
    # sidebar define el contenido de la barra lateral.
    ui.sidebar(
      # Contenido
      "Contenido barra lateral",
      
      # Ancho de la barra lateral.
      width = "500px",
      
      # Posición (puede ser left o right)
      position = "right",
      
      # Color de la barra lateral.
      bg = "steelblue"
    ),
    
    # Contenido principal.
    "Contenido principal",
    
    # Color principal
    bg = "white"
  )
)

def server(input, output, session):
  pass

app = App(app_ui, server)
```

### **Grid**

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]

from shiny import App, ui

app_ui = ui.page_fluid(
  ui.row(
    # Primer columna
    ui.column(4, "Mi Primer columna"),
    
    # Segunda columna
    ui.column(4, "Mi Segunda columna"),
    
    # Tercer columna
    ui.column(4, "Mi Tercer columna")
  )
)

def server(input, output, session):
  pass

app = App(app_ui, server)
```

### **card**

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]

from shiny import App, render, ui, reactive

app_ui = ui.page_fluid(
  ui.card(
    # Encabezado carta
    ui.card_header("Encabezado"),
    
    # Contenido
    "Contenido carta",
    
    # Pie carta
    ui.card_footer("Pie")
  ),
  
  title = "Cartas"
)

def server(input, output, session):
  pass

app = App(app_ui, server)
```

### **navset_card_tab**

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]

from shiny import App, render, ui, reactive

app_ui = ui.page_fluid(
  ui.navset_card_tab(
    # Cada nav es un tab de navegación.
    ui.nav_panel(
      # Titulo
      "TAB 1",
      # Contenido
      "Contenido 1"
    ),
    
    ui.nav_panel(
      # Titulo
      "TAB 2",
      
      # Contenido
      "Contenido 2"
    )
  ),
  
  title = "Cartas"
)

def server(input, output, session):
  pass

app = App(app_ui, server)
```

:::

::: {.card title="inputs"}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]

from shiny import App, render, ui

## UI
app_ui = ui.page_fluid(
  
  ui.input_text(
    id = "texto", # Id de la entrada.
    label = "Campo de texto: ",  # Título de la entrada.
    value = "valor",  # Valor por defecto.
    width = "100%",  # Ancho de la entrada.
    placeholder = "Agregue el texto",  # Texto a mostrar cuando el campo esta vacío.
  ),
  
  ui.input_text_area(
    id = "text_area", # Id de la entrada.
    label = "Campo de area texto: ",  # Título de la entrada.
    value = "valor",  # Valor por defecto.
    width = "100%",  # Ancho de la entrada.
    placeholder = "Agregue el texto",  # Texto a mostrar cuando el campo esta vacío.
  ),
  
  ui.input_numeric(
    id = "numero", # Id de la entrada.
    label = "Campo numérico: ",  # Título de la entrada.
    value = 4,  # Valor por defecto.
    min = 0,  # Mínimo valor posible.
    max = 10,  # Máximo valor posible.
    step = 2,  # Intervalo de incremento o decremento.
    width = "100%"  # Ancho de la entrada.
  ),
  
  ui.input_select(
    id = "seleccion", # Id de la entrada.
    label = "Campo de selección: ",  # Título de la entrada.
    choices = ["a", "b", "c", "d"],  # Opciones posibles.
    selected = "c",  # Opción seleccionada por defecto.
    multiple = False,  # Permite varias opciones si es True.
    width = "100%"  # Ancho de la entrada.
  ),
  
  ui.input_slider(
    id = "slider", # Id de la entrada.
    label = "Campo de slider: ",  # Título de la entrada.
    min = 0,  # Mínimo valor posible.
    max = 10,  # Máximo valor posible.
    value = 4,  # Valor por defecto.
    step = 2,  # Intervalo de incremento o decremento.
    width = "100%"  # Ancho de la entrada.
  ),
  
  ui.input_switch(
    id = "switch", # Id de la entrada.
    label = "Campo de switch: ",  # Título de la entrada.
    value = True,  # Valor por defecto.
    width = "100%"  # Ancho de la entrada.
  ),
  
  ui.input_checkbox(
    id = "checkbox", # Id de la entrada.
    label = "Campo de checkbox: ",  # Título de la entrada.
    value = True,  # Valor por defecto.
    width = "100%"  # Ancho de la entrada.
  ),
  
  ui.input_checkbox_group(
    id = "checkbox_group", # Id de la entrada.
    label = "Campo de checkbox_group: ",  # Título de la entrada.
    choices = ["a", "b", "c", "d"],  # Opciones posibles.
    selected = "c",  # Opción seleccionada por defecto.
    inline = True,  # Valor por defecto.
    width = "100%"  # Ancho de la entrada.
  ),
  
  ui.input_radio_buttons(
    id = "radio_buttons", # Id de la entrada.
    label = "Campo de radio_buttons: ",  # Título de la entrada.
    choices = ["a", "b", "c", "d"],  # Opciones posibles.
    selected = "c",  # Opción seleccionada por defecto.
    inline = True,  # Valor por defecto.
    width = "100%"  # Ancho de la entrada.
  ),
  
  ui.input_date(
    id = "date", # Id de la entrada.
    label = "Campo de date: ",  # Título de la entrada.
    value = "2025-01-01",  # Valor por defecto.
    min = "2022-01-01",  # Mínimo valor posible.
    max = "2026-01-01",  # Máximo valor posible.
    format = "yyyy-mm-dd", # Máximo valor posible.
    startview = "month", # Máximo valor posible.
    weekstart = 0, # Máximo valor posible.
    language = "es", # Máximo valor posible.
    width = "100%"  # Ancho de la entrada.
  ),
  
  ui.input_date_range(
    id = "date_range", # Id de la entrada.
    label = "Campo de date_range: ",  # Título de la entrada.
    start = "2025-01-01",  # Valor por defecto.
    end = "2025-01-07",  # Valor por defecto.
    min = "2022-01-01",  # Mínimo valor posible.
    max = "2026-01-01",  # Máximo valor posible.
    format = "yyyy-mm-dd", # Máximo valor posible.
    startview = "month", # Máximo valor posible.
    weekstart = 0, # Máximo valor posible.
    language = "es", # Máximo valor posible.
    separator = " hasta ", # Máximo valor posible.
    width = "100%"  # Ancho de la entrada.
  ),
  
  ui.input_file(
    id = "subida", # Id de la entrada.
    label = "Campo de subida: ",  # Título de la entrada.
    multiple = False,  # Título de la entrada.
    accept = [".csv", "application/pdf", "image/*"],  # Título de la entrada.
    width = "100%"  # Ancho de la entrada.
  ),
  
  ui.input_action_button(
    id = "boton", # Id de la entrada.
    label = "Boton",  # Título de la entrada.
    width = "100%",  # Ancho de la entrada.
  )
)

## servidor
def server(input, output, session):
  pass

## Aplicación completa
app = App(app_ui, server)
```

:::

::: {.card title="outputs"}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]

## file: app.py
from pathlib import Path
import pandas as pd
import matplotlib.pyplot as plt
from shiny import App, render, ui

ruta = Path(__file__).parent

## UI
app_ui = ui.page_fluid(
  
  ui.h3("Grafico"),
  ui.output_plot(
    id = "grafico", # Id de la salida.
  ),
  ui.hr(),
  
  ui.h3("Tabla"),
  ui.output_table(
    id = "tabla", # Id de la salida.
  ),
  ui.hr(),
  
  ui.h3("Tabla Datos"),
  ui.output_data_frame(
    id = "tabladatos", # Id de la salida.
  ),
  ui.hr(),
  
  ui.h3("Texto"),
  ui.output_text(
    id = "texto", # Id de la salida.
  ),
  ui.hr(),
  
  ui.h3("Texto Código"),
  ui.output_text_verbatim(
    id = "textocodigo", # Id de la salida.
  ),
  ui.hr(),
  
  ui.h3("HTML"),
  ui.output_ui(
    id = "html", # Id de la salida.
  ),
  ui.hr()
)

## servidor
def server(input, output, session):

  estudiantes = pd.read_csv(str(ruta) + "/www/data/EjemploEstudiantes.csv", sep = ";", decimal = ",", index_col = 0)
  
  @output
  @render.plot
  def grafico():
    fig, ax = plt.subplots()
    ax.boxplot(estudiantes)
    return fig
  
  @output
  @render.table
  def tabla():
    return estudiantes.head()
  
  @output
  @render.data_frame
  def tabladatos():
    return render.DataGrid(estudiantes, height = "350px", width = "100%", filters = True)
  
  @output
  @render.text
  def texto():
    return estudiantes.dtypes
  
  @output
  @render.text
  def textocodigo():
    return estudiantes
  
  @output
  @render.ui
  def html():
    return ui.input_checkbox(id = "checkbox", label = "Campo de checkbox: ", value = True, width = "100%")

## Aplicación completa
app = App(app_ui, server)

## file: www/data/EjemploEstudiantes.csv
;Matematicas;Ciencias;Espanol;Historia;EdFisica
Lucia;7;6,5;9,2;8,6;8
Pedro;7,5;9,4;7,3;7;7
Ines;7,6;9,2;8;8;7,5
Luis;5;6,5;6,5;7;9
Andres;6;6;7,8;8,9;7,3
Ana;7,8;9,6;7,7;8;6,5
Carlos;6,3;6,4;8,2;9;7,2
Jose;7,9;9,7;7,5;8;6
Sonia;6;6;6,5;5,5;8,7
Maria;6,8;7,2;8,7;9;7
```

:::

::: {.card title="HTML"}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]

## file: app.py
from shiny import App, render, ui

## UI
app_ui = ui.page_fluid(
  
  # h1 define el tamaño del texto.
  # Pueden ser h1, h2, h3, h4, h5 y h6.
  # Entre más grande el número más paqueña la letra.
  ui.h1("Título"),
  
  # Se pueden agregar atributos.
  # Para ello se debe agregar un diccionario
  # indicando el nombre del atributo y el valor
  ui.h2(
    {"style": "font-weight: bold;"},
    "Subtitulo"
  ),
  
  # Se pueden agregar varios atributos.
  ui.h3(
    {"id": "identificador", "style": "color: red;font-style: italic;"},
    "texto"
  ),
  
  # hr agrega una linea horizontal.
  ui.hr(),
  
  # div crea secciones.
  ui.div(
    {"style": "background-color: orange;"},
    ui.h3("Más texto"),
    
    # a crea hipervinculos.
    ui.a({"href": "https://promidat.website/"}, "PROMiDAT")
  ),
  
  ui.img({"src": "https://promidat.website/wp-content/uploads/2021/09/cropped-cropped-L003-Logo-Promidat-Horizontal-1.jpg"})
)

## servidor
def server(input, output, session):
  pass

## Aplicación completa
app = App(app_ui, server)
```

:::

# server

## Row {.tabset}

::: {.card title="Programación Reactiva"}

### **inputs & outputs**

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]

## file: app.py
from shiny import App, render, ui

app_ui = ui.page_fluid(
  ui.input_text("texto", "Digite el texto: ", placeholder="Enter text"),
  ui.input_select("seleccion", "Seleccione una opción: ", choices = ["a", "b", "c"]),
  ui.input_checkbox("checkbox", "Seleccione la opción: ", True),
  ui.hr(),
  ui.h3("Salida 1"),
  ui.output_text_verbatim("salida1"),
  ui.hr(),
  ui.h3("Salida 2"),
  ui.output_text_verbatim("salida2")
)

def server(input, output, session):
  
  # La salida se debe llamar igual al id que se indico en el UI.
  @output
  @render.text
  def salida1():
    # Para que la salida se modifique solo hay que invocar
    # la o las entradas deseadas.
    texto = input.texto()
    checkbox = str(input.checkbox())
    res = "Texto: " + texto + ", Opcion: " + checkbox
    return res
  
  @output
  @render.text
  def salida2():
    texto = input.texto()
    seleccion = str(input.seleccion())
    res = "Texto: " + texto + ", Opcion: " + seleccion
    return res


app = App(app_ui, server)
```

### **Variables reactivas**

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]

## file: app.py
from shiny import App, render, ui, reactive

app_ui = ui.page_fluid(
  ui.input_text("texto", "Digite el texto: ", placeholder="Enter text"),
  ui.input_select("seleccion", "Seleccione una opción: ", choices = ["a", "b", "c"]),
  ui.input_checkbox("checkbox", "Seleccione la opción: ", True),
  ui.hr(),
  ui.h3("Salida 1"),
  ui.output_text_verbatim("salida1"),
  ui.hr(),
  ui.h3("Salida 2"),
  ui.output_text_verbatim("salida2")
)

def server(input, output, session):
  
  # Crear variable reactiva
  rv = reactive.Value(None)
  
  @output
  @render.text
  def salida1():
    texto = input.texto()
    checkbox = str(input.checkbox())
    rv.set(checkbox)
    res = "Texto: " + texto + ", Opcion: " + checkbox
    return res
  
  @output
  @render.text
  def salida2():
    texto = input.texto()
    seleccion = str(input.seleccion())
    checkbox = str(rv.get())
    res = "Texto: " + texto + ", Opcion: " + seleccion + ", RV: " + checkbox
    return res


app = App(app_ui, server)
```

### **Observe**

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]

## file: app.py
from shiny import App, ui, reactive, render

app_ui = ui.page_fluid(
    ui.panel_well(  # Vertical layout agrupado
        ui.input_action_button("obs1", "Observe 1", width="100%"),
        ui.input_action_button("obs2", "Observe 2", width="100%"),
        ui.input_action_button("obs3", "Observe 3", width="100%"),
        ui.output_text("textObs")
    )
)

def server(input, output, session):
    valobs = reactive.Value(1)

    @reactive.Effect
    def _():
        total = input.obs1() + input.obs2() + input.obs3()
        valobs.set(total)

    @output
    @render.text
    def textObs():
        return f"El valor es: {valobs.get()}"

app = App(app_ui, server)
```

### **Observe Event**

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]

## file: app.py
from shiny import App, ui, reactive, render

app_ui = ui.page_fluid(
    ui.panel_well(  # Vertical layout agrupado
        ui.input_action_button("obsE1", "Observe E1"),
        ui.input_action_button("obsE2", "Observe E2"),
        ui.input_action_button("obsE3", "Observe E3"),
        ui.output_text("textObsE")
    )
)

def server(input, output, session):
    valobs = reactive.Value(1)

    @reactive.Effect
    @reactive.event(input.obsE1, input.obsE2)
    def _():
        total = input.obsE1() + input.obsE2() + input.obsE3()
        valobs.set(total)

    @output
    @render.text
    def textObsE():
        return f"El valor es: {valobs.get()}"

app = App(app_ui, server)
```

:::

::: {.card title="Actualizar"}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]

## file: app.py
from pathlib import Path
import pandas as pd
from shiny import App, render, ui, reactive

ruta = Path(__file__).parent

app_ui = ui.page_fluid(
  ui.input_select("ejemploActualizar", "Seleccione una opción: ", choices = ["estudiantes", "mtcars"]),
  ui.input_select("ejemploActualizar2", "Seleccione las variables: ", choices = [], multiple=True),
  ui.hr(),
  ui.output_text(id = "textoActualizar"),
  ui.output_data_frame(id = "tablaActualizar")
)

def server(input, output, session):
  texto  = reactive.Value(None)
  datos  = reactive.Value(None)
  filtro = reactive.Value(None)
  
  @reactive.Effect
  def _():
    aux = input.ejemploActualizar()
    texto.set(aux)
    
    if aux == "estudiantes":
      auxdatos = pd.read_csv(str(ruta) + "/www/data/EjemploEstudiantes.csv", sep = ";", decimal = ",", index_col = 0)
    elif aux == "mtcars":
      auxdatos = pd.read_csv(str(ruta) + "/www/data/mtcars.csv", sep = ";", decimal = ",", index_col = 0)
    
    ui.update_select(
      "ejemploActualizar2",
      label = f"Seleccionar variables de la tabla {aux}:",
      choices = auxdatos.columns.tolist()
    )
    datos.set(auxdatos)

  @reactive.Effect
  @reactive.event(input.ejemploActualizar2)
  def _():
    variables = input.ejemploActualizar2()
    auxdatos = datos.get()
    filtro.set(auxdatos.loc[:, variables])
  
  @output
  @render.text
  def textoActualizar():
    return texto.get()

  @output
  @render.data_frame
  def tablaActualizar():
    aux = filtro.get()
    return render.DataGrid(aux, height = "350px", width = "100%", filters = True)

app = App(app_ui, server)

## file: www/data/EjemploEstudiantes.csv
;Matematicas;Ciencias;Espanol;Historia;EdFisica
Lucia;7;6,5;9,2;8,6;8
Pedro;7,5;9,4;7,3;7;7
Ines;7,6;9,2;8;8;7,5
Luis;5;6,5;6,5;7;9
Andres;6;6;7,8;8,9;7,3
Ana;7,8;9,6;7,7;8;6,5
Carlos;6,3;6,4;8,2;9;7,2
Jose;7,9;9,7;7,5;8;6
Sonia;6;6;6,5;5,5;8,7
Maria;6,8;7,2;8,7;9;7

## file: www/data/mtcars.csv
"mpg";"cyl";"disp";"hp";"drat";"wt";"qsec";"vs";"am";"gear";"carb"
"Mazda RX4";21;6;160;110;3.9;2.62;16.46;0;1;4;4
"Mazda RX4 Wag";21;6;160;110;3.9;2.875;17.02;0;1;4;4
"Datsun 710";22.8;4;108;93;3.85;2.32;18.61;1;1;4;1
"Hornet 4 Drive";21.4;6;258;110;3.08;3.215;19.44;1;0;3;1
"Hornet Sportabout";18.7;8;360;175;3.15;3.44;17.02;0;0;3;2
"Valiant";18.1;6;225;105;2.76;3.46;20.22;1;0;3;1
"Duster 360";14.3;8;360;245;3.21;3.57;15.84;0;0;3;4
"Merc 240D";24.4;4;146.7;62;3.69;3.19;20;1;0;4;2
"Merc 230";22.8;4;140.8;95;3.92;3.15;22.9;1;0;4;2
"Merc 280";19.2;6;167.6;123;3.92;3.44;18.3;1;0;4;4
"Merc 280C";17.8;6;167.6;123;3.92;3.44;18.9;1;0;4;4
"Merc 450SE";16.4;8;275.8;180;3.07;4.07;17.4;0;0;3;3
"Merc 450SL";17.3;8;275.8;180;3.07;3.73;17.6;0;0;3;3
"Merc 450SLC";15.2;8;275.8;180;3.07;3.78;18;0;0;3;3
"Cadillac Fleetwood";10.4;8;472;205;2.93;5.25;17.98;0;0;3;4
"Lincoln Continental";10.4;8;460;215;3;5.424;17.82;0;0;3;4
"Chrysler Imperial";14.7;8;440;230;3.23;5.345;17.42;0;0;3;4
"Fiat 128";32.4;4;78.7;66;4.08;2.2;19.47;1;1;4;1
"Honda Civic";30.4;4;75.7;52;4.93;1.615;18.52;1;1;4;2
"Toyota Corolla";33.9;4;71.1;65;4.22;1.835;19.9;1;1;4;1
"Toyota Corona";21.5;4;120.1;97;3.7;2.465;20.01;1;0;3;1
"Dodge Challenger";15.5;8;318;150;2.76;3.52;16.87;0;0;3;2
"AMC Javelin";15.2;8;304;150;3.15;3.435;17.3;0;0;3;2
"Camaro Z28";13.3;8;350;245;3.73;3.84;15.41;0;0;3;4
"Pontiac Firebird";19.2;8;400;175;3.08;3.845;17.05;0;0;3;2
"Fiat X1-9";27.3;4;79;66;4.08;1.935;18.9;1;1;4;1
"Porsche 914-2";26;4;120.3;91;4.43;2.14;16.7;0;1;5;2
"Lotus Europa";30.4;4;95.1;113;3.77;1.513;16.9;1;1;5;2
"Ford Pantera L";15.8;8;351;264;4.22;3.17;14.5;0;1;5;4
"Ferrari Dino";19.7;6;145;175;3.62;2.77;15.5;0;1;5;6
"Maserati Bora";15;8;301;335;3.54;3.57;14.6;0;1;5;8
"Volvo 142E";21.4;4;121;109;4.11;2.78;18.6;1;1;4;2
```

:::

::: {.card title="Aislamiento"}

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]

## file: app.py
from shiny import App, render, ui, reactive

app_ui = ui.page_fluid(
  ui.input_text("texto", "Digite el texto: ", placeholder="Enter text"),
  ui.input_select("seleccion", "Seleccione una opción: ", choices = ["a", "b", "c"]),
  ui.input_checkbox("checkbox", "Seleccione la opción: ", True),
  ui.hr(),
  ui.input_action_button("boton", "Ejecutar"),
  ui.hr(),
  ui.h3("Salida 1"),
  ui.output_text_verbatim("salida1"),
  ui.hr(),
  ui.h3("Salida 2"),
  ui.output_text_verbatim("salida2")
)

def server(input, output, session):
  
  @output
  @render.text
  def salida1():
    input.boton()
    # Todo lo que se encuentre dentro de la función reactive.isolate
    # no va a reactivar la salida.
    with reactive.isolate():
      texto = input.texto()
      checkbox = str(input.checkbox())
    res = "Texto: " + texto + ", Opcion: " + checkbox
    return res
  
  @output
  @render.text
  def salida2():
    texto = input.texto()
    seleccion = str(input.seleccion())
    res = "Texto: " + texto + ", Opcion: " + seleccion
    return res


app = App(app_ui, server)
```

:::

# Manejo de Errores

## Row

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]

## file: app.py
from shiny import App, ui, render

app_ui = ui.page_fluid(
    ui.input_text("numero", "Escribe un número para dividir 100:", value=""),
    ui.output_text("resultado")
)

def server(input, output, session):
    @output
    @render.text
    def resultado():
        try:
            valor = float(input.numero())
            resultado = 100 / valor
            return f"100 dividido entre {valor} es {resultado:.2f}"
        except Exception as e:
            # type = "message" | "warning" | "error" | "default"
            ui.notification_show("ERROR: " + str(e), type="error", duration = 5)
            return(None)

app = App(app_ui, server)
```

# Recursos

## Row

### column

**ui**

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical

## file: app.py
from pathlib import Path
from shiny import App, ui, render

app_ui = ui.page_fluid(
    ui.img(src = "img/logo.jpg")
)

def server(input, output, session):
  pass

www_dir = Path(__file__).parent / "www"
app = App(app_ui, server, static_assets=www_dir)
```

### column

**server**

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]
#| layout: vertical

## file: app.py
import pandas as pd
from pathlib import Path
from shiny import App, ui, render

ruta = Path(__file__).parent

app_ui = ui.page_fluid(
    ui.output_data_frame(id = "tablaDatos")
)

def server(input, output, session):
  
  datos = pd.read_csv(str(ruta) + "/www/data/EjemploEstudiantes.csv", sep = ";", decimal = ",", index_col = 0)
  
  @output
  @render.data_frame
  def tablaDatos():
    return render.DataGrid(datos, height = "350px", width = "100%", filters = True)

app = App(app_ui, server)

## file: www/data/EjemploEstudiantes.csv
;Matematicas;Ciencias;Espanol;Historia;EdFisica
Lucia;7;6,5;9,2;8,6;8
Pedro;7,5;9,4;7,3;7;7
Ines;7,6;9,2;8;8;7,5
Luis;5;6,5;6,5;7;9
Andres;6;6;7,8;8,9;7,3
Ana;7,8;9,6;7,7;8;6,5
Carlos;6,3;6,4;8,2;9;7,2
Jose;7,9;9,7;7,5;8;6
Sonia;6;6;6,5;5,5;8,7
Maria;6,8;7,2;8,7;9;7
```

# shinywidgets

## Row

**plotly**

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]

## file: app.py
import pandas as pd
from pathlib import Path
import plotly.graph_objects as go
from shiny import App, ui, render
from shinywidgets import output_widget, render_widget

ruta = Path(__file__).parent

app_ui = ui.page_fluid(
    ui.input_select("var1", "Seleccione una variable: ", choices = []),
    ui.input_select("var2", "Seleccione una variable: ", choices = []),
    output_widget("ploty_plot")
)

def server(input, output, session):
    
    datos = pd.read_csv(str(ruta) + "/www/data/EjemploEstudiantes.csv", sep = ";", decimal = ",", index_col = 0)

    ui.update_select("var1", choices = datos.columns.tolist())
    ui.update_select("var2", choices = datos.columns.tolist())
    
    @render_widget
    def ploty_plot():
      fig = go.Figure()
      no_plot = fig.add_trace(
        go.Scatter(x = datos.loc[:, input.var1()], y = datos.loc[:, input.var2()], mode = 'markers')
      )
      return fig

app = App(app_ui, server)

## file: www/data/EjemploEstudiantes.csv
;Matematicas;Ciencias;Espanol;Historia;EdFisica
Lucia;7;6,5;9,2;8,6;8
Pedro;7,5;9,4;7,3;7;7
Ines;7,6;9,2;8;8;7,5
Luis;5;6,5;6,5;7;9
Andres;6;6;7,8;8,9;7,3
Ana;7,8;9,6;7,7;8;6,5
Carlos;6,3;6,4;8,2;9;7,2
Jose;7,9;9,7;7,5;8;6
Sonia;6;6;6,5;5,5;8,7
Maria;6,8;7,2;8,7;9;7
```

**leaflet**

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]

## file: app.py
from ipyleaflet import Map  
from shiny import App, ui
from shinywidgets import output_widget, render_widget  

app_ui = ui.page_fluid(
  ui.input_numeric(id = "lat", label = "Latitud: ", value = 9.7489,  width = "100%"),
  ui.input_numeric(id = "lon", label = "Longitud: ", value = -83.7534,  width = "100%"),
  output_widget("mapa")
)  

def server(input, output, session):
    @render_widget  
    def mapa():
        return Map(center=(input.lat(), input.lon()), zoom=5)  

app = App(app_ui, server)
```

# Ejemplo

## Row

```{shinylive-python}
#| standalone: true
#| components: [editor, viewer]

## file: app.py
import numpy as np
import pandas as pd
from math import pi
import matplotlib.pyplot as plt
from shiny import App, render, ui, reactive
from scipy.cluster.hierarchy import fcluster, linkage

app_ui = ui.page_navbar(
  ui.nav_panel(
    "Cargar Datos",
    ui.layout_sidebar(
      ui.sidebar(
        ui.input_file(
          id = "archivo",
          label = "Subir archivo: ",
          multiple = False,
          accept = [".csv"],
          width = "100%"
        ),
        ui.input_radio_buttons(
          id = "sep",
          label = "Seleccione el separador de datos: ",
          choices = [";", ","],
          inline = True,
          width = "100%"
        ),
        ui.input_radio_buttons(
          id = "dec",
          label = "Seleccione el separador de decimales: ",
          choices = [",", "."],
          inline = True,
          width = "100%"
        ),
        ui.input_switch(
          id = "rownames",
          label = "¿Nombres de fila?",
          value = True,
          width = "100%"
        ),
        ui.input_action_button("cargar", "Cargar Datos")
      ),
      ui.output_data_frame(id = "tabladatos")
    )
  ),
  ui.nav_panel(
    "Dispersión",
    ui.card(
      ui.card_header("Opciones"),
      ui.row(
        ui.column(6, ui.input_select("varx", "Seleccione una variable: ", [])),
        ui.column(6, ui.input_select("vary", "Seleccione una variable: ", []))
      )
    ),
    ui.output_plot("dispersion")
  ),
  ui.nav_panel(
    "Clusterización",
    ui.row(
      ui.column(
        4,
        ui.card(
          ui.card_header("Opciones"),
          ui.input_slider("nclusters", "Indique la cantidad de clusters: ", 2, 10, 2),
          ui.input_select("agrupacion", "Seleccione método de agrupación: ", ["single", "complete", "average", "ward"]),
          ui.input_select("distancia", "Seleccione método de distancia: ", ["euclidean", "minkowski", "canberra"]),
          ui.hr(),
          ui.input_action_button("generar", "Generar Modelo"),
        )
      ),
      ui.column(
        8, 
        ui.card(ui.card_header("Clusters"), ui.output_data_frame(id = "tablaclusters")),
        ui.card(ui.card_header("Gráfico Radar"), ui.output_plot("radar"))
      )
    )
  ),
  title = "Aplicación",
  bg = "steelblue"
)

def server(input, output, session):
  datos = reactive.Value(None)
  clusters = reactive.Value(None)
  
  def centroide(datos, clusters):
    real = pd.DataFrame()
    for x in np.unique(clusters):
      real[x] = datos.iloc[clusters == x, :].mean()
    porc = real.copy()
    for i in range(porc.shape[0]):
      aux = porc.iloc[i, :] - min(porc.iloc[i, :])
      porc.iloc[i, :] = aux / max(aux)
    return {"real" : real, "porc" : porc}
  
  @reactive.Effect
  def _():
    input.cargar()
    try:
      with reactive.isolate():
        ruta = input.archivo()[0]["datapath"] # name: Nombre del archivo
        sep = input.sep()
        dec = input.dec()
        rownames = input.rownames()
        if rownames:
          rownames = 0
      
      aux = pd.read_csv(ruta, sep = sep, decimal = dec, index_col = rownames)
      datos.set(aux)
      ui.update_select("varx", choices = aux.columns.tolist())
      ui.update_select("vary", choices = aux.columns.tolist())
    except Exception as e:
      ui.notification_show(str(e), duration=5)
      datos.set(None)
  
  @output
  @render.data_frame
  def tabladatos():
    df = datos.get()
    if df is None:
      return None
    return render.DataGrid(df, height = "350px", width = "100%", filters = True)
  
  @output
  @render.plot
  def dispersion():
    df = datos.get()
    varx = input.varx()
    vary = input.vary()
    if df is None:
      return None
    try:
      fig, ax = plt.subplots()
      ax.scatter(df.loc[:, varx], df.loc[:, vary])
      return fig
    except Exception as e:
      ui.notification_show(str(e), duration=5)
      return None
  
  @reactive.Effect
  def _():
    input.generar()
    with reactive.isolate():
      df = datos.get()
      nclusters = input.nclusters()
      agrupacion = input.agrupacion()
      distancia = input.distancia()
    
    if df is None:
      clusters.set(None)
    else:
      df = df.copy()
      df = pd.get_dummies(df)
      grupos = fcluster(
        linkage(df, method = agrupacion, metric = distancia),
        nclusters, criterion = 'maxclust')
      grupos = grupos - 1
      clusters.set(grupos)
  
  @output
  @render.data_frame
  def tablaclusters():
    cl = clusters.get()
    
    with reactive.isolate():
      df = datos.get()
    
    if df is None or cl is None:
      return None
    df = df.copy()
    df['Clusters'] = cl
    return render.DataGrid(df, height = "350px", width = "100%", filters = True)
  
  @output
  @render.plot
  def radar():
    cl = clusters.get()
    
    with reactive.isolate():
      df = datos.get()
    
    if df is None or cl is None:
      return None
    
    df = df.copy()
    df = pd.get_dummies(df)
    centros = centroide(df, cl)
    etq = centros["porc"].index.values
    angulos = [n / float(len(etq)) * 2 * pi for n in range(len(etq))]
    angulos += angulos[:1]
    
    fig, ax = plt.subplots()
    ax = plt.subplot(111, polar = True)
    ax.set_theta_offset(pi / 2)
    ax.set_theta_direction(-1)
    
    plt.xticks(angulos[:-1], etq)
    ax.set_rlabel_position(0)
    plt.yticks(
      [10, 20, 30, 40, 50, 60, 70, 80, 90, 100],
      ["10%", "20%", "30%", "40%", "50%", "60%", "70%", "80%", "90%", "100%"], 
      color = "grey", size = 8)
    plt.ylim(-10, 100)
    for x in centros["porc"].columns:
      valores = round(centros["porc"].loc[:, x] * 100, 2).tolist()
      valores += valores[:1]
      ax.plot(angulos, valores, linewidth = 1, linestyle = 'solid', label = x)
      ax.fill(angulos, valores, alpha = 0.3)
    
    plt.legend(loc='upper right', bbox_to_anchor = (0.1,  0.1))
    return fig

app = App(app_ui, server)
```
